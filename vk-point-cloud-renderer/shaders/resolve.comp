#version 450

#extension GL_ARB_gpu_shader_int64 : enable
#extension GL_NV_shader_atomic_int64 : enable

layout(local_size_x = 16, local_size_y = 16) in;

struct Vertex{
	float x;
	float y;
	float z;
	uint colors;
};

layout (std430, binding=0) buffer point_data {
	Vertex vertices[];
};

layout (std430, binding=1) buffer framebuffer_data {
	uint64_t ssFramebuffer[];
};

layout (std430, binding=2) buffer depthbuffer_data {
	uint64_t ssDepthbuffer[];
};

layout (std430, binding=3) buffer rg_data {
	uint64_t ssRG[];
};

layout (std430, binding=4) buffer ba_data {
	uint64_t ssBA[];
};

layout(rgba8ui, binding = 0) uniform uimage2D uOutput;

uvec4 rgbAt(int pixelID){
	uint64_t rg = ssRG[pixelID];
	uint64_t ba = ssBA[pixelID];

	uint a = uint(ba & 0xFFFFFFFFUL);

	uint r = uint((rg >> 32) / a);
	uint g = uint((rg & 0xFFFFFFFFUL) / a);
	uint b = uint((ba >> 32) / a);

	if(a == 0){
		return uvec4(0, 0, 0, 255);
	}

	uvec4 icolor = uvec4(r, g, b, a);

	return icolor;
}

uvec4 grayscaleAt(int pixelID){
	uint64_t val64 = ssFramebuffer[pixelID];
	uint ucol = uint(val64 & 0x00FFFFFFUL);
	uint weight = uint(val64 >> 32);

	if(ucol == 0){
		return uvec4(0, 0, 0, 255);
	}

	uint c = uint(ucol / weight);

	uvec4 icolor = uvec4(c, c, c, 255);

	return icolor;
}

void main(){
	uvec2 id = gl_LocalInvocationID.xy;
	id.x += gl_WorkGroupSize.x * gl_WorkGroupID.x;
	id.y += gl_WorkGroupSize.y * gl_WorkGroupID.y;

	ivec2 imgSize = imageSize(uOutput);

	ivec2 pixelCoords = ivec2(id);
	ivec2 sourceCoords = ivec2(id);
	int pixelID = sourceCoords.x + sourceCoords.y * imgSize.x;
	
	uvec4 icolor = rgbAt(pixelID);

	imageStore(uOutput, pixelCoords, icolor);
	ssFramebuffer[pixelID] = 0UL;
	ssRG[pixelID] = 0UL;
	ssBA[pixelID] = 0UL;
	ssDepthbuffer[pixelID] = 0xffffffffff000000UL;
}